name: Render Video

on:
  workflow_dispatch:
    inputs:
      videoId:
        description: 'The ID of the video to render'
        required: true
      width:
        description: 'Video width in pixels'
        required: false
        default: '1080'
      height:
        description: 'Video height in pixels'
        required: false
        default: '1920'
      fps:
        description: 'Frames per second'
        required: false
        default: '30'
      duration:
        description: 'Duration in seconds'
        required: false
        default: '30'

jobs:
  render:
    name: Render video
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Create scripts directory
        run: mkdir -p scripts

      # Always create the fetch script with CommonJS syntax
      - name: Create fetch script
        run: |
          cat > scripts/fetch-video-data.js << 'EOF'
          // CommonJS script for fetching video data using only built-in Node.js modules
          const fs = require('fs');
          const https = require('https');
          const http = require('http');
          const url = require('url');

          // Get command line arguments
          const videoId = process.argv[2];
          const apiUrl = process.env.API_URL || 'http://localhost:3000';

          if (!videoId) {
            console.error('Video ID is required');
            process.exit(1);
          }

          // Function to make HTTP/HTTPS requests without external dependencies
          function makeRequest(urlString, callback) {
            const parsedUrl = url.parse(urlString);
            const options = {
              hostname: parsedUrl.hostname,
              port: parsedUrl.port || (parsedUrl.protocol === 'https:' ? 443 : 80),
              path: parsedUrl.path,
              method: 'GET',
              headers: {
                'User-Agent': 'FlashReels-VideoRenderer',
                'Accept': 'application/json'
              }
            };

            const reqModule = parsedUrl.protocol === 'https:' ? https : http;
            
            const req = reqModule.request(options, (res) => {
              let data = '';
              res.on('data', (chunk) => {
                data += chunk;
              });
              
              res.on('end', () => {
                if (res.statusCode >= 200 && res.statusCode < 300) {
                  try {
                    const jsonData = JSON.parse(data);
                    callback(null, jsonData);
                  } catch (err) {
                    callback(new Error(`Failed to parse response: ${err.message}`));
                  }
                } else {
                  callback(new Error(`Request failed with status code: ${res.statusCode}`));
                }
              });
            });
            
            req.on('error', (err) => {
              callback(err);
            });
            
            req.end();
          }

          // Function to fetch video data
          function fetchVideoData() {
            console.log(`Fetching video data for ID: ${videoId} from ${apiUrl}/api/videos/${videoId}`);
            
            makeRequest(`${apiUrl}/api/videos/${videoId}`, (err, videoData) => {
              if (err) {
                console.error('Error fetching video data:', err.message);
                
                // Create a fallback object with the videoId
                const fallbackData = {
                  videoId: videoId,
                  title: "Video not found",
                  description: null,
                  imageUrls: [],
                  audioUrl: "",
                  captions: [],
                  script: "",
                  voice: ""
                };
                
                fs.writeFileSync('video-data.json', JSON.stringify(fallbackData, null, 2));
                console.error('Created fallback video data');
                return;
              }
              
              // Extract only the needed properties for Remotion rendering
              const remotionProps = {
                videoId: videoData.id,
                title: videoData.title,
                description: videoData.description,
                imageUrls: videoData.imageUrls || [],
                audioUrl: videoData.audioUrl || "",
                captions: videoData.captions || [],
                script: videoData.script || "",
                voice: videoData.voice || ""
              };
              
              fs.writeFileSync('video-data.json', JSON.stringify(remotionProps, null, 2));
              console.log('Video data saved to video-data.json');
            });
          }

          // Execute the function
          fetchVideoData();
          EOF

      # Verify the script content
      - name: Verify script content
        run: |
          echo "First 10 lines of the script:"
          head -n 10 scripts/fetch-video-data.js
          echo "Script file size: $(wc -c < scripts/fetch-video-data.js) bytes"
          echo "Script file permissions: $(ls -la scripts/fetch-video-data.js)"

      - name: Create output directory
        run: mkdir -p output

      - name: Install bc command
        run: sudo apt-get update && sudo apt-get install -y bc

      - name: Check Node.js environment
        run: |
          echo "Node.js version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "Current working directory: $(pwd)"
          ls -la scripts/

      - name: Fetch video data
        run: |
          echo "Running fetch-video-data.js script..."
          node ./scripts/fetch-video-data.js ${{ github.event.inputs.videoId }}
        env:
          API_URL: ${{ secrets.API_URL }}

      - name: Render video
        run: |
          npx remotion render \
            remotion/index.ts \
            FlashReelVideo \
            output/video-${{ github.event.inputs.videoId }}.mp4 \
            --props="./video-data.json" \
            --width=${{ github.event.inputs.width }} \
            --height=${{ github.event.inputs.height }} \
            --fps=${{ github.event.inputs.fps }} \
            --duration=$(echo "${{ github.event.inputs.duration }} * ${{ github.event.inputs.fps }}" | bc)

      - name: Upload rendered video
        uses: actions/upload-artifact@v4
        with:
          name: rendered-video-${{ github.event.inputs.videoId }}
          path: output/video-${{ github.event.inputs.videoId }}.mp4
          retention-days: 7 
