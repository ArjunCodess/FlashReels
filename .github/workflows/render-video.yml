name: Render Video

on:
  workflow_dispatch:
    inputs:
      videoId:
        description: 'The ID of the video to render'
        required: true
      width:
        description: 'Video width in pixels'
        required: false
        default: '720'
      height:
        description: 'Video height in pixels'
        required: false
        default: '1280'
      fps:
        description: 'Frames per second'
        required: false
        default: '30'
      # Keep duration input for backward compatibility, but we won't use it
      duration:
        description: 'Duration in seconds (will be automatically calculated from captions)'
        required: false
        default: '30'

jobs:
  render:
    name: Render video
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Create scripts directory
        run: mkdir -p scripts

      # Always create the fetch script with CommonJS syntax
      - name: Create fetch script
        run: |
          cat > scripts/fetch-video-data.js << 'EOF'
          // CommonJS script for fetching video data using only built-in Node.js modules
          const fs = require('fs');
          const https = require('https');
          const http = require('http');
          const url = require('url');

          // Get command line arguments
          const videoId = process.argv[2];
          const apiUrl = process.env.API_URL || 'http://localhost:3000';

          if (!videoId) {
            console.error('Video ID is required');
            process.exit(1);
          }

          // Function to make HTTP/HTTPS requests without external dependencies
          function makeRequest(urlString, callback) {
            const parsedUrl = url.parse(urlString);
            const options = {
              hostname: parsedUrl.hostname,
              port: parsedUrl.port || (parsedUrl.protocol === 'https:' ? 443 : 80),
              path: parsedUrl.path,
              method: 'GET',
              headers: {
                'User-Agent': 'FlashReels-VideoRenderer',
                'Accept': 'application/json'
              }
            };

            const reqModule = parsedUrl.protocol === 'https:' ? https : http;
            
            const req = reqModule.request(options, (res) => {
              let data = '';
              res.on('data', (chunk) => {
                data += chunk;
              });
              
              res.on('end', () => {
                if (res.statusCode >= 200 && res.statusCode < 300) {
                  try {
                    const jsonData = JSON.parse(data);
                    callback(null, jsonData);
                  } catch (err) {
                    callback(new Error(`Failed to parse response: ${err.message}`));
                  }
                } else {
                  callback(new Error(`Request failed with status code: ${res.statusCode}`));
                }
              });
            });
            
            req.on('error', (err) => {
              callback(err);
            });
            
            req.end();
          }

          // Function to fetch video data
          function fetchVideoData() {
            console.log(`Fetching video data for ID: ${videoId} from ${apiUrl}/api/videos/${videoId}`);
            
            makeRequest(`${apiUrl}/api/videos/${videoId}`, (err, videoData) => {
              if (err) {
                console.error('Error fetching video data:', err.message);
                
                // Create a fallback object with the videoId
                const fallbackData = {
                  video: {
                    id: videoId,
                    title: "Video not found",
                    description: null,
                    imageUrls: [],
                    audioUrl: "",
                    captions: [],
                    script: "",
                    voice: "",
                    captionStyle: "classic",
                    status: "error",
                    createdAt: new Date().toISOString(),
                    createdBy: ""
                  }
                };
                
                fs.writeFileSync('video-data.json', JSON.stringify(fallbackData, null, 2));
                console.error('Created fallback video data');
                return;
              }
              
              // Extract only the needed properties for Remotion rendering
              const remotionProps = {
                video: {
                  id: videoData.id,
                  title: videoData.title,
                  description: videoData.description,
                  imageUrls: videoData.imageUrls || [],
                  audioUrl: videoData.audioUrl || "",
                  captions: videoData.captions || [],
                  script: videoData.script || "",
                  voice: videoData.voice || "",
                  captionStyle: videoData.captionStyle || "classic",
                  status: videoData.status || "",
                  createdAt: videoData.createdAt || new Date().toISOString(),
                  createdBy: videoData.createdBy || ""
                }
              };
              
              // Save props in the format Remotion expects according to the docs
              fs.writeFileSync('video-data.json', JSON.stringify(remotionProps, null, 2));
              console.log('Video data saved to video-data.json');
            });
          }

          // Execute the function
          fetchVideoData();
          EOF

      # Create script to calculate duration from captions
      - name: Create duration calculation script
        run: |
          cat > scripts/calculate-duration.js << 'EOF'
          // Script to calculate video duration based on captions
          const fs = require('fs');
          
          try {
            // Read video data JSON file
            const rawData = JSON.parse(fs.readFileSync('video-data.json', 'utf8'));
            
            // Extract video object following the exact structure as defined in Remotion docs
            if (!rawData.video) {
              throw new Error('Invalid props structure: missing video object');
            }
            
            const videoData = rawData.video;
            const captions = videoData.captions || [];
            const fps = process.argv[2] || 30;
            
            // Debug output of structure
            console.log('DEBUG: Props structure validated, found video object');
            console.log('DEBUG: Video ID =', videoData.id);
            console.log('DEBUG: Captions count =', captions.length);
            
            if (captions.length === 0) {
              console.log('No captions found, using default duration');
              console.log(30 * fps); // Default 30 seconds in frames
              process.exit(0);
            }
            
            // Get the last caption's end time
            const lastCaption = captions[captions.length - 1];
            const lastCaptionEndTime = lastCaption.end;
            
            // Calculate duration in frames exactly matching the player calculation
            const durationInFrames = Number((lastCaptionEndTime * fps).toFixed(0)) + 10;
            
            console.log(`Last caption ends at ${lastCaptionEndTime} seconds`);
            console.log(`Calculated duration: ${durationInFrames} frames (${durationInFrames/fps} seconds)`);
            console.log(durationInFrames);
          } catch (error) {
            console.error('Error calculating duration:', error.message);
            console.log(30 * (process.argv[2] || 30)); // Default to 30 seconds if error
            process.exit(1);
          }
          EOF

      # Verify the script content
      - name: Verify script content
        run: |
          echo "First 10 lines of the fetch script:"
          head -n 10 scripts/fetch-video-data.js
          echo "Script file size: $(wc -c < scripts/fetch-video-data.js) bytes"
          echo "Script file permissions: $(ls -la scripts/fetch-video-data.js)"

      - name: Create output directory
        run: mkdir -p output

      - name: Install bc command
        run: sudo apt-get update && sudo apt-get install -y bc

      - name: Check Node.js environment
        run: |
          echo "Node.js version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "Current working directory: $(pwd)"
          ls -la scripts/

      - name: Fetch video data
        run: |
          echo "Running fetch-video-data.js script..."
          node ./scripts/fetch-video-data.js ${{ github.event.inputs.videoId }}
        env:
          API_URL: ${{ secrets.API_URL }}

      # New step to validate the video-data.json file
      - name: Validate video data
        run: |
          echo "Validating video-data.json content..."
          jq . video-data.json
          echo "Checking video object structure..."
          jq '.video | type' video-data.json
          echo "Checking captions structure..."
          jq '.video.captions | length' video-data.json
          echo "First caption:"
          jq '.video.captions[0]' video-data.json
          echo "Last caption:"
          jq '.video.captions[-1]' video-data.json
          echo "Checking for required fields:"
          jq '.video | has("captionStyle")' video-data.json
          jq '.video | has("status")' video-data.json
          jq '.video | has("createdAt")' video-data.json

      - name: Calculate video duration
        id: duration
        run: |
          chmod +x scripts/calculate-duration.js
          DURATION_FRAMES=$(node ./scripts/calculate-duration.js ${{ github.event.inputs.fps }})
          # Add only 10 frames buffer instead of 20 to match the player
          DURATION_WITH_BUFFER=$((DURATION_FRAMES + 10))
          echo "Calculated duration in frames: $DURATION_WITH_BUFFER (base: $DURATION_FRAMES + 10 frame buffer)"
          echo "duration_frames=$DURATION_WITH_BUFFER" >> $GITHUB_OUTPUT
          
          # For debugging: Also calculate using the old formula
          echo "Sanity check: Old calculation would result in:"
          echo "$(echo "${{ github.event.inputs.duration }} * ${{ github.event.inputs.fps }}" | bc) frames"

      - name: Render video
        run: |
          echo "Rendering video with duration: ${{ steps.duration.outputs.duration_frames }} frames"
          # Log the props file content for debugging
          echo "Using props from video-data.json:"
          cat video-data.json
          
          # Render using the exact same approach recommended in Remotion docs
          npx remotion render \
            remotion/index.ts \
            FlashReelRenderedVideo \
            output/video-${{ github.event.inputs.videoId }}.mp4 \
            --props="./video-data.json" \
            --width=${{ github.event.inputs.width }} \
            --height=${{ github.event.inputs.height }} \
            --fps=${{ github.event.inputs.fps }} \
            --duration=${{ steps.duration.outputs.duration_frames }} \
            --log=verbose

      - name: Upload rendered video
        uses: actions/upload-artifact@v4
        with:
          name: rendered-video-${{ github.event.inputs.videoId }}
          path: output/video-${{ github.event.inputs.videoId }}.mp4
          retention-days: 7 